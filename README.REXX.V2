                            Hercules REXX support

This is a full rewrite of the original Rexx implementation by Jan Jaeger

the Rexx packages supported are

Open Object Rexx ( from now on called simply ooRexx )

Regina Rexx ( from now on called simply Regina  )


                    Building Hercules with Rexx support

The support is completely dynamic, only the headers are needed to provide Rexx support

if the headers rexx.h and oorexxapi.h are found ooRexx support will be included
if the headers rexxsaa.h is found Regina support will be included

if Rexx support is not <needed> configure supports the flags
--disable-object-rexx
--disable-regina-rexx


                                Using Rexx

Since the support is completely dynamic the available rexx interpreters will be
determined at run time ( trying to load the appropriate dynamic libraries )

unless specified otherwise ( see further down the available options )
the rexx initialization stub will check in the order ooRexx and Regina

so in case both interpreters are available ooRexx will be the first choice.

no action is required by the user all will be automatic at the first execution of
a rexx script

to invoke a rexx script the command is

EXEC <scriptname> <script arguments>

within the Rexx script Hercules commands can be issued using the construct

format (1) without reply
Address Hercules <command> <command arguments>

when the above format (1) is used the Rexx variable RC contains the return code
from the hercules command

format (2) with a reply
Address Hercules <command> <command arguments> (STEM <stemname>
( The format is mimicked after the EXECIO format )

when the above format (2) is used the RC will alway be 0
and the <stemname> wiil contain the reply with the usual convention that
<stemname>.0 will contain the number of lines returned

to manage the Rexx environment the command is

REXX <option> <arguments>

the option are

-- to define the search path for the Rexx script invoked

PATH a path with the system defined PATH separator
    ( ; for windows / : for linux and similar )
well no need to tell about it

PATH clear
to clear the path

PATH reset
to reset the PATH to the default startup path ( see later for the meaning )

as an alternate spelling for those who might be confused REXXPATH is also accepted

SYSP[ATH] on/off
to extend the search to the standard system PATH used for executables

the above behavior mimicks the ooRexx behavior for the search of external
function/classes ( ::library ::requires directives)

the default is to extend the search

-- to define the extensions to be used when resolving the script name

EXT[ENSIONS] list of the extension to use when autocompleting the script name

EXT[ENSIONS] reset
to reset the EXTENSIONS list to the default startup list ( see later for the meaning )

the default extension are
(NONE) the plain file name ==> always checked
.REXX:.rexx:.REX:.rex:.CMD:.cmd:.RX:.rx

if a script name contains a (.) ==> is in the format <filename>.<filetype>
it is used as is without any further processing

note the alias of SUF[FIXES] can be used

-- control the script name resolution process

RESOL[VER] on/off
defines who will resolve the script name
on  the hercules rexx interface will take care of that and issue the appropriate
    message if the process fail
off the command name will be passed AS IS to the rexx interpreter

the behavior is different from ooRexx and Regina

for ooRexx
HHC01603I exec notfound
REX0003E: Error 3:  Failure during initialization
REX0534E: Error 3.901:  Failure during initialization: Program "notfound" was not found
HHC17502E REXX(ooRexx) ooRexx RC(-3)
for Regina
HHC01603I exec notfound
HHC17502E REXX(Regina) Regina RC(-3)

-- control the verbosity of the interface

MSGL[EVEL] 0-9

0 is the default

as far as now any value between 1 and 9 will have the same effect
it will display at the end of the script the messages
HHC17503I REXX(<package name>) Exec/Script '<script name>' RetRC(0)
HHC17504I REXX(<package name>) Exec/Script '<script name>' RetValue'0'


-- define a prefix to be used for standard and error/trace messages

MSGP[REFIX] a <string>  up to 9 chars ( no blanks allowed ) / reset
ERRP[REFIX]

I guess that no further details are needed



for each command issued at the end a status of the rexx interface is displayed
the same info as in

-- displaying the status of the rexx interface

the command REXX without any operands will display the status of the interface

HHC01603I rexx
HHC17500I REXX(ooRexx) Rexx Path : /hercules/scripts
HHC17500I REXX(ooRexx) SystemPath: (ON)
HHC17500I REXX(ooRexx) Extensions: .REXX:.rexx:.REX:.rex:.CMD:.cmd:.RX:.rx
HHC17500I REXX(ooRexx) Resolver  : (ON)
HHC17500I REXX(ooRexx) Msg Level : 0
HHC17500I REXX(ooRexx) Msg Prefix: (OFF)
HHC17500I REXX(ooRexx) Err Prefix: (OFF)
HHC17500I REXX(ooRexx) REXX-ooRexx_4.2.0(MT) 6.04 21 Mar 2012
HHC17500I REXX(ooRexx) MACOSX FUNCTION Instore

HHC01603I rexx
HHC17500I REXX(Regina) Rexx Path : /hercules/scripts
HHC17500I REXX(Regina) SystemPath: (ON)
HHC17500I REXX(Regina) Extensions: .REXX:.rexx:.REX:.rex:.CMD:.cmd:.RX:.rx
HHC17500I REXX(Regina) Resolver  : (ON)
HHC17500I REXX(Regina) Msg Level : 0
HHC17500I REXX(Regina) Msg Prefix: (OFF)
HHC17500I REXX(Regina) Err Prefix: (OFF)
HHC17500I REXX(Regina) REXX-Regina_3.6(MT) 5.00 31 Dec 2011
HHC17500I REXX(Regina) UNIX FUNCTION Instore

or when no interface is enabled

HHC01603I rexx
HHC17500I REXX() Rexx Path : /hercules/scripts
HHC17500I REXX() SystemPath: (ON)
HHC17500I REXX() Extensions: .REXX:.rexx:.REX:.rex:.CMD:.cmd:.RX:.rx
HHC17500I REXX() Resolver  : (ON)
HHC17500I REXX() Msg Level : 0
HHC17500I REXX() Msg Prefix: (OFF)
HHC17500I REXX() Err Prefix: (OFF)
HHC17521I REXX() Support not started/enabled


since the builtin support is bilingual two other commands are provided
to manage the Rexx interface

REXX stop/disable

REXX start/enable  without any operands will enable the default Rexx interpreter
and as expected specifyng oorexx/regina will override the default


NOTE the start/stop command are not available if hercules has been built with just
one package available

environment variables and defaults

the defaults are those hardcoded in the <code>

some environment variables are provided to override them

HREXX_PACKAGE=<value>
acceptedvalues are
AUTO, not really needed, but implements the default search order for interpreters
NONE no default rexx interpreter will be autostarted, a manual start is needed
oorexx/regina self explanatory


HREXX_PATH[S]=<a well formed path concatenation>
wher to find the rexx scripts

HREXX_EXTENSIONS=<a  well formed extensions list >


when issuing a
REXX <some option> reset

the relative values are reset to the hardcoded values or to the value provided
by the environment variables

never wrote so much doc in my whole IT life :-)

if something is not clear , let me know and I will try to explain better

Enrico Sorichetti

